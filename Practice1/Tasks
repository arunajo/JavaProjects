Задание 1. (1 балл)
Создать класс, реализующий стандартный интерфейс Runnable. Переопределить метод run() в котором выводить на экран ID потока.
ID потока возвращает метод Thread.currentThread().getId();
Создать и запустить три объекта этого класса на выполнение в трёх потоках.

Задание 2. (2 балла)
Создать два класса, реализующих стандартный интерфейс Runnable.
Полем классов будет переменная типа CopyOnWriteArrayList<int> listOfNumbers.
Первый класс будет читать из переменной и выводить на экран, а второй класс будет в неё записывать числа. 
Сделать таким образом, чтобы чтение и запись выполнялись с небольшой задержкой.

Задание 3. (4 балла)
В одном МФЦ работают три окна, которые обслуживают три категории граждан: молодые, пожилые и бизнесмены. Окна работают без очередей (каждый гражданин является отдельным потоком).
Первое окно принимает любые категории граждан, второе - только вторую категорию, а третье - только третью. Гражданин идёт в случайное окно.
Если гражданин не может получить услугу из-за занятости окна или неверной категории, то он разгневанно уходит. Определить процент ушедших клиентов из каждой категории.
Подсказка: для определения “занятости окна” достаточно использовать булевый флаг.

Задание 4. (6 баллов)
В поликлинике все пациенты принимаются двумя кабинетами (терапевт и МРТ) с единой (одной) очередью. Пациенты появляются случайно между 300 и 600 мс.
Когда пациент выходит из очереди, он сначала принимается терапевтом. Осмотр производится случайное количество миллисекунд. Как только осмотр заканчивается, пациент отправляется в кабинет МРТ (также на случайное количество миллисекунд), а к терапевту поступает следующий пациент, если очередь не пустая.
Пациент у терапевта ждёт окончания обследования предыдущего пациента на МРТ, прежде чем “выйти из кабинета”. Иными словами, поток пациента находится внутри метода “терапевта” прежде чем перейти в метод “МРТ”.
Определить максимальную длину очереди из пациентов.
